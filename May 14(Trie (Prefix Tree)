//Problem statement: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3329/

//Solution 1:
class TrieNode {
    public boolean isWord; 
    public TrieNode[] children = new TrieNode[26];
    public TrieNode() {}
}

public class Trie {
    private TrieNode root;
    public Trie() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode ws = root;
        for(int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            if(ws.children[c - 'a'] == null){
                ws.children[c - 'a'] = new TrieNode();
            }
            ws = ws.children[c - 'a'];
        }
        ws.isWord = true;
    }

    public boolean search(String word) {
        TrieNode ws = root; 
        for(int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            if(ws.children[c - 'a'] == null) return false;
            ws = ws.children[c - 'a'];
        }
        return ws.isWord;
    }

    public boolean startsWith(String prefix) {
        TrieNode ws = root; 
        for(int i = 0; i < prefix.length(); i++){
            char c = prefix.charAt(i);
            if(ws.children[c - 'a'] == null) return false;
            ws = ws.children[c - 'a'];
        }
        return true;
    }
}

//Solution 2: Removed redundnant code and added explanation



public class Trie {
    
    class Node {
    char c;
    Node[] arr;
    boolean isWord;
    
    Node(char c)
    {
        this.c=c;
        arr=new Node[26]; // child can contain 26 characters
    }
  }

    
    Node root;
    Trie() {
        this.root = new Node('\0'); //initialise root to empty character
    }

    public void insert(String word) { //iterate on the word char by char
        Node node= root; //start with root and check its children 
           for(char c: word.toCharArray())
           {
              Node temp= node.arr[c-'a']; //if children of node has that character node will point toit
               if(temp==null) //if not found
               {
                  temp=new Node(c);
                  node.arr[c-'a']=temp; //join it to node
               }
               node=temp; 
                 
           }
        node.isWord=true;
    }

    public boolean search(String word) {
        Node node= root; 
           for(char c: word.toCharArray())
           {
              Node temp= node.arr[c-'a']; 
               if(temp==null)  //word doesnt exist
               return false;
               node=temp; 
                 
           }
        
       return node.isWord; //after word finishes check end of the word
    }

    public boolean startsWith(String prefix) {
        Node node= root; 
           for(char c: prefix.toCharArray())
           {
              Node temp= node.arr[c-'a']; 
               if(temp==null)  //word doesnt exist
               return false;
               node=temp; 
                 
           }
        return true;
    }
}
