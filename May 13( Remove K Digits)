//Problem statement: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3328/

//Solution 1 : Without stack. Approach is simple: we need to find a drop in peak (ie iterate over the array k times, and check
//if current digit is followed by a smaller digit from left to right, we need to delete the MSD which has this property
//Dont forget to remove trailing zeroes in the end

class Solution {
    public String removeKdigits(String num, int k) {
 
        if(k==0)
            return num; //nothing to be removed
        if(k==num.length())
            return "0"; //everything is to be removed
        
            
            StringBuilder sb = new StringBuilder(num);
              /*We will iterate the number k times. In each iteration:
        1. Remove the digit for which the next digit is smaller.
        2. If we reach at the end than remove last digit.*/
        for (int j = 1; j <= k; j++) {
            int i = 0;
            while (i < sb.length() - 1 && sb.charAt(i) <= sb.charAt(i + 1)) {
                i++;
            }
            sb.delete(i, i + 1);
        }

        //remove leading 0's
        while (sb.length() > 1 && sb.charAt(0) == '0')
            sb.delete(0, 1);

        if (sb.length() == 0) {
            return "0";
        }

        
        
        return sb.toString();
    }
}

//Solution 2: Stack is the best data structure here, as it simplifies peek and pop of every digit greater than current digit

