/*Problem statement- https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/534/week-1-may-1st-may-7th/3320/*/


//Solution 1 : Use linked hash map to maintain order of characters as we need to find index of character

class Solution {
    public int firstUniqChar(String s) {
        if(s.equals("") || s==null)
            return -1;
        
    
        Map<Character, Integer> frequencyMap = new LinkedHashMap<>();   
        
        for (char c : s.toCharArray())
        {
            if(frequencyMap.containsKey(c))
            {
               int count = frequencyMap.get(c) ;
                count++;
                frequencyMap.put(c,count);                
            }
            
            else
               frequencyMap.put(c,1);
        }
        
        for (Character key : frequencyMap.keySet()) {
            int value=frequencyMap.get(key);
            if(value==1)
                return s.indexOf(key);
            }
        return -1;
      
    }
}

//Solution 2: At the time of putting count , store index in other hashmap, this still uses O(1) space

class Solution {
    public int firstUniqChar(String s) {
        if( s == null || s.length()==0)
            return -1;
        
    
        Map<Character, Integer> frequencyMap = new LinkedHashMap<>();   
        Map<Character, Integer> IndexMap = new HashMap<>();   
        
        for (int i=0 ; i<s.length(); i++)
        {
            char c= s.charAt(i);
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
            IndexMap.putIfAbsent(c, i);
        }
        
        for (Character key : frequencyMap.keySet()) {
            int value=frequencyMap.get(key);
            if(value==1)
                return IndexMap.get(key);
            }
        return -1;
      
    }
}
//Solution 3: Use array to store frequency using ASCII values, use array of 256 to represent all characters

class Solution {
    public int firstUniqChar(String s) {
        if( s == null || s.length()==0)
            return -1;
        
        int[] count = new int[26];
        for (int i=0 ; i<s.length(); i++)
            count[s.charAt(i) -'a'] ++;
        
        for(int i=0 ; i<s.length(); i++)
        {
            if(count[s.charAt(i) -'a']==1)
                return i;
        }
     
        return -1;
      
    }
}


//Solution 4: First index and last index will match

class Solution {
    public int firstUniqChar(String s) {
        if( s == null || s.length()==0)
            return -1;
        
        char[] arr = s.toCharArray();
       
        for (char c: arr)
        {
            int i = s.indexOf(c);
            int j = s.lastIndexOf(c);
            if(i==j)
                return i;
        }
        
        return -1;
        
      
    }
    
    //Solution 5: Best Running Time, use indexOf to start searching from new index
    
    class Solution {
    public int firstUniqChar(String s) {
       
     int ans = Integer.MAX_VALUE;
        
        for(char c = 'a'; c <= 'z'; c ++ ){
            int left = s.indexOf(c);          
            if(left != -1 && left == s.lastIndexOf(c)) { //if Both First and last,ie unique
                ans = Math.min(left, ans);
            }
            
        }
        return (ans == Integer.MAX_VALUE) ? -1 : ans;
        
      
    }
    
}


